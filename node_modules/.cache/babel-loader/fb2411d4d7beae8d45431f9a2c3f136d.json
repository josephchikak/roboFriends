{"ast":null,"code":"// name: logger.js\n// version: 0.0.1\n// http://github.com/quirkey/node-logger\n\n/*\n\nCopyright (c) 2010 Aaron Quint\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvar path = require('path'),\n    sys = require('sys'),\n    fs = require('fs');\n\nvar makeArray = function makeArray(nonarray) {\n  return Array.prototype.slice.call(nonarray);\n}; // Create a new instance of Logger, logging to the file at `log_file_path`\n// if `log_file_path` is null, log to STDOUT.\n\n\nvar Logger = function Logger(log_file_path) {\n  // default write is STDOUT\n  this.write = sys.print;\n  this.log_level_index = 3; // if a path is given, try to write to it\n\n  if (log_file_path) {\n    // Write to a file\n    log_file_path = path.normalize(log_file_path);\n    this.stream = fs.createWriteStream(log_file_path, {\n      flags: 'a',\n      encoding: 'utf8',\n      mode: 0666\n    });\n    this.stream.write(\"\\n\");\n\n    this.write = function (text) {\n      this.stream.write(text);\n    };\n  }\n};\n\nLogger.levels = ['fatal', 'error', 'warn', 'info', 'debug']; // The default log formatting function. The default format looks something like:\n//\n//    error [Sat Jun 12 2010 01:12:05 GMT-0400 (EDT)] message\n// \n\nLogger.prototype.format = function (level, date, message) {\n  return [level, ' [', date, '] ', message].join('');\n}; // Set the maximum log level. The default level is \"info\".\n\n\nLogger.prototype.setLevel = function (new_level) {\n  var index = Logger.levels.indexOf(new_level);\n  return index != -1 ? this.log_level_index = index : false;\n}; // The base logging method. If the first argument is one of the levels, it logs\n// to that level, otherwise, logs to the default level. Can take `n` arguments\n// and joins them by ' '. If the argument is not a string, it runs `sys.inspect()`\n// to print a string representation of the object.\n\n\nLogger.prototype.log = function () {\n  var args = makeArray(arguments),\n      log_index = Logger.levels.indexOf(args[0]),\n      message = ''; // if you're just default logging\n\n  if (log_index === -1) {\n    log_index = this.log_level_index;\n  } else {\n    // the first arguement actually was the log level\n    args.shift();\n  }\n\n  if (log_index <= this.log_level_index) {\n    // join the arguments into a loggable string\n    args.forEach(function (arg) {\n      if (typeof arg === 'string') {\n        message += ' ' + arg;\n      } else {\n        message += ' ' + sys.inspect(arg, false, null);\n      }\n    });\n    message = this.format(Logger.levels[log_index], new Date(), message);\n    this.write(message + \"\\n\");\n    return message;\n  }\n\n  return false;\n};\n\nLogger.levels.forEach(function (level) {\n  Logger.prototype[level] = function () {\n    var args = makeArray(arguments);\n    args.unshift(level);\n    return this.log.apply(this, args);\n  };\n});\nexports.Logger = Logger;\n\nexports.createLogger = function (log_file_path) {\n  return new Logger(log_file_path);\n};","map":null,"metadata":{},"sourceType":"script"}